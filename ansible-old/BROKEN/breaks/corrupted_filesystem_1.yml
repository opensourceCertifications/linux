---
- name: Randomly corrupt 20 executables in PATH
  hosts: localhost
  become: yes
  gather_facts: no

  tasks:
    - name: Find all executables in target directories (top-level only)
      ansible.builtin.find:
        paths:
          - /usr/local/sbin
          - /usr/local/bin
          - /usr/sbin
          - /usr/bin
          - /sbin
          - /bin
          - /usr/local/games
        file_type: file
        recurse: no
        excludes: 'sh,ssh,sshd,sudo,rsync'
      register: command_list


    - name: Pick a random number between 20 and 30
      set_fact:
        random_count: "{{ range(20, 31) | random }}"

    - name: Pick 20 random files
      set_fact:
        chosen_files: "{{ (command_list.files | map(attribute='path') | list | shuffle)[:random_count | int ] }}"

    - name: Show which files will be corrupted
      debug:
        var: chosen_files

    - name: Create backup folder
      file:
        path: /tmp/corrupted
        state: directory

    - name: Backup files to /tmp/corrupted using rsync
      synchronize:
        src: "{{ item }}"
        dest: "/tmp/corrupted/{{ item | basename }}"
        archive: yes  # preserves ownership, perms, timestamps, etc.
        perms: yes    # included in 'archive', but being explicit doesn't hurt
        links: yes    # also included in 'archive'
        # note: since src/dest are both local, Ansible will do a local rsync
      loop: "{{ chosen_files }}"
      register: backup_results

    - name: backing up files to be corrupted
      synchronize:
        src: /tmp/corrupted/
        dest: /tmp/corrupted_b/
        archive: yes  # preserves ownership, perms, timestamps, etc.
        perms: yes    # included in 'archive', but being explicit doesn't hurt
        links: yes    # also included in 'archive'

    - name: Corrupt first 1024 bytes of each chosen file
      ansible.builtin.shell: "dd if=/dev/urandom of='/tmp/corrupted/{{ item | basename }}' bs=1 count=1024 conv=notrunc"
      loop: "{{ chosen_files }}"
      register: corruption_results
      changed_when: true
      ignore_errors: yes

    - name: Restore from backup (only if restore_files=true)
      synchronize:
        src: "/tmp/corrupted/{{ item | basename }}"
        dest: "{{ item }}"
        archive: yes
        perms: yes
        links: yes
      loop: "{{ chosen_files }}"
      register: restore_results

