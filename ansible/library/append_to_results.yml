---
# Required vars:
#   result_key: string            # e.g. "restored_ok"
#   new_items:  list[string]      # e.g. ["path1", "path2"]

- name: Stat /tmp/results.yml
  ansible.builtin.stat:
    path: /tmp/results.yml
  register: _res_stat

- name: Read existing /tmp/results.yml
  ansible.builtin.slurp:
    src: /tmp/results.yml
  register: _res_slurp
  when: _res_stat.stat.exists

- name: Build 'existing' dict (or empty)
  ansible.builtin.set_fact:
    _existing: "{}"

- name: Parse existing YAML
  ansible.builtin.set_fact:
    _existing: "{{ _res_slurp.content | b64decode | from_yaml | default({}, true) }}"
  when: _res_stat.stat.exists

- name: Merge (append to list at key)
  ansible.builtin.set_fact:
    _merged: >-
      {{
        _existing
        | combine({
            (result_key): (
              ((_existing[result_key]) if (result_key in _existing) else [])
              + (new_items | default([]))
            ) | unique
          }, recursive=True)
      }}

- name: Write merged results.yml (with backup)
  ansible.builtin.copy:
    dest: /tmp/results.yml
    content: "{{ _merged | to_nice_yaml }}"
    mode: "0644"
    backup: yes
  when: (new_items | default([]) | length) > 0
