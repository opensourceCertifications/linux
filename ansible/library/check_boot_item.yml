---
# target: the path being checked
- name: Stat {{ target }}
  ansible.builtin.stat:
    path: "{{ target }}"
  register: st

# Always init per-item flags/temps
- name: Default _ok=false
  ansible.builtin.set_fact:
    _ok: false

- name: Reset per-item temp vars
  ansible.builtin.set_fact:
    itype_s: ""         # normalized initramfs type string (lowercased)

# ---------------- Kernel ----------------
- name: Kernel image → looks like Linux kernel
  ansible.builtin.command:
    argv: ["file", "-b", "--", "{{ target }}"]
  register: ft
  changed_when: false
  when:
    - st.stat.exists
    - target is match('^/boot/vmlinuz-')

- name: Mark kernel ok
  ansible.builtin.set_fact:
    _ok: "{{ 'linux kernel' in ((ft.stdout | default('')) | lower) }}"
  when:
    - st.stat.exists
    - target is match('^/boot/vmlinuz-')
    - ft is defined

# ---------------- Initramfs ----------------
- name: Initramfs → detect compression type
  ansible.builtin.command:
    argv: ["file", "-b", "--", "{{ target }}"]
  register: itype
  changed_when: false
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')

- name: Normalize initramfs type string
  ansible.builtin.set_fact:
    itype_s: "{{ (itype.stdout | default('') | lower) }}"
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')
    - itype is defined

- name: zstd test
  ansible.builtin.command:
    argv: ["zstd", "-t", "--", "{{ target }}"]
  register: zt
  changed_when: false
  failed_when: false
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')
    - "'zstandard' in itype_s"

- name: xz test
  ansible.builtin.command:
    argv: ["xz", "-t", "--", "{{ target }}"]
  register: xt
  changed_when: false
  failed_when: false
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')
    - "'xz' in itype_s"

- name: gzip test
  ansible.builtin.command:
    argv: ["gzip", "-t", "--", "{{ target }}"]
  register: gt
  changed_when: false
  failed_when: false
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')
    - "'gzip' in itype_s"

- name: Uncompressed newc magic
  ansible.builtin.command:
    argv: ["head", "-c", "6", "--", "{{ target }}"]
  register: h6
  changed_when: false
  failed_when: false
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')
    - "'zstandard' not in itype_s"
    - "'xz' not in itype_s"
    - "'gzip' not in itype_s"

- name: Mark initramfs ok
  ansible.builtin.set_fact:
    _ok: >-
      {{
        (zt is defined and zt.rc == 0)
        or (xt is defined and xt.rc == 0)
        or (gt is defined and gt.rc == 0)
        or (h6 is defined and (h6.stdout | default('') | trim) == '070701')
        or _ok
      }}
  when:
    - st.stat.exists
    - target is match('^/boot/initramfs-.*\\.img$')
    - (itype is defined or itype_s != '')

# ---------------- grub.cfg ----------------
- name: grub.cfg → has blscfg or a menuentry
  ansible.builtin.slurp:
    src: "{{ target }}"
  register: gc
  when:
    - st.stat.exists
    - target == '/boot/grub2/grub.cfg'

- name: Mark grub.cfg ok
  ansible.builtin.set_fact:
    _ok: >-
      {{
        ('menuentry' in (gc.content | default('') | b64decode))
        or ('blscfg' in (gc.content | default('') | b64decode))
        or _ok
      }}
  when: gc is defined

# ---------------- BLS entry ----------------
- name: BLS entry → title, linux, initrd
  ansible.builtin.slurp:
    src: "{{ target }}"
  register: bls
  when:
    - st.stat.exists
    - target is match('^/boot/loader/entries/.*\\.conf$')

- name: Mark BLS ok
  ansible.builtin.set_fact:
    _ok: >-
      {{
        ('title'  in (bls.content | default('') | b64decode))
        and ('linux'  in (bls.content | default('') | b64decode))
        and ('initrd' in (bls.content | default('') | b64decode))
        or _ok
      }}
  when: bls is defined

# ---------------- grubenv ----------------
- name: grubenv → grub2-editenv list OK; fallback to header
  ansible.builtin.command:
    argv: ["grub2-editenv", "{{ target }}", "list"]
  register: ge
  changed_when: false
  failed_when: false
  when:
    - st.stat.exists
    - target == '/boot/grub2/grubenv'

- name: grubenv fallback header
  ansible.builtin.slurp:
    src: "{{ target }}"
  register: geh
  when:
    - st.stat.exists
    - target == '/boot/grub2/grubenv'
    - ge.rc is defined
    - ge.rc != 0

- name: Mark grubenv ok
  ansible.builtin.set_fact:
    _ok: >-
      {{
        (ge is defined and ge.rc == 0)
        or (
          ((geh.content | default('') | b64decode) | splitlines | first | default(''))
          == 'GRUB Environment Block'
        )
        or _ok
      }}
  when:
    - st.stat.exists
    - target == '/boot/grub2/grubenv'

# ---------------- record result ----------------
- name: Update check_status
  ansible.builtin.set_fact:
    check_status: "{{ (check_status | default({})) | combine({ target: (_ok | default(false)) }) }}"
