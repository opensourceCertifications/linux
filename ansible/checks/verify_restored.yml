---
- name: Ensure required tools are present
  ansible.builtin.package:
    name:
      - file
      - zstd
      - xz
      - gzip
      - grub2-tools-minimal   # for grub2-editenv
    state: present

# Build target list from your vars
- name: Gather boot targets from vars
  ansible.builtin.set_fact:
    boot_targets: >-
      {{
        (corruptedBootFiles | default([]))
        + (corruptedBootFile | default([]))
        + (corruptedFile | default([]))
      }}

- name: Init per-file status map
  ansible.builtin.set_fact:
    check_status: {}          # e.g. {"/boot/vmlinuz-...": true/false}

# Run an Ansible-y check for each path (no shell pipelines)
- name: Check each boot target
  ansible.builtin.include_tasks: "{{ playbook_dir }}/library/check_boot_item.yml"
  loop: "{{ boot_targets }}"
  loop_control:
    loop_var: target
    label: "{{ target }}"

# Turn the status map into two lists
- name: Bucket restored_files / corrupted_files
  ansible.builtin.set_fact:
    restored_files: >-
      {{ (check_status | default({}) | dict2items)
         | selectattr('value','eq',true)
         | map(attribute='key')
         | list }}
    corrupted_files: >-
      {{ (check_status | default({}) | dict2items)
         | selectattr('value','ne',true)
         | map(attribute='key')
         | list }}

# Append to /tmp/results.yml via your helper
- name: Append restored files
  ansible.builtin.include_tasks: "{{ playbook_dir }}/library/append_to_results.yml"
  vars:
    result_key: "restored_files"
    new_items: "{{ restored_files | default([]) }}"
  when: restored_files | length > 0

- name: Append corrupted files
  ansible.builtin.include_tasks: "{{ playbook_dir }}/library/append_to_results.yml"
  vars:
    result_key: "corrupted_files"
    new_items: "{{ corrupted_files | default([]) }}"
  when: corrupted_files | length > 0
