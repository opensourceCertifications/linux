- name: Setup Terraform Environment
  hosts: localhost
  tasks:

    - name: Check if Homebrew is installed
      ansible.builtin.command: which brew
      register: brew_check
      changed_when: false
      ignore_errors: true

    - name: Install Homebrew if not installed
      ansible.builtin.shell: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        creates: "{{ ansible_env.HOME }}/.linuxbrew/bin/brew"
      when: brew_check.rc != 0

    - name: Ensure Homebrew is in PATH
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.profile"
        line: 'eval "$({{ ansible_env.HOME }}/.linuxbrew/bin/brew shellenv)"'
        create: true
        mode: '0644'
      when: brew_check.rc != 0

    - name: Install packages with Homebrew
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - terraform
        - hashicorp/tap/vagrant
      ignore_errors: true

    - name: Download AlmaLinux cloud image
      become: true
      ansible.builtin.get_url:
        url: https://repo.almalinux.org/almalinux/9/cloud/x86_64/images/AlmaLinux-9-GenericCloud-latest.x86_64.qcow2
        dest: /var/lib/libvirt/images/almalinux.qcow2
        mode: '0644'

    - name: Ensure Terraform directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/terraform-vm"
        state: directory
        mode: '0755'

    - name: Installing virtualbox
      become: true
      ansible.builtin.package:
        name:
          - virtualbox
          - virtualbox-dkms
        state: present
        update_cache: true

    - name: Run modinfo on compressed vboxdrv.ko.zst
      ansible.builtin.command: >
        modinfo /lib/modules/{{ ansible_kernel }}/updates/dkms/vboxdrv.ko.zst
      register: vboxdrv_modinfo
      changed_when: false
      ignore_errors: true

    - name: Check if vboxdrv is signed
      debug:
        msg: "vboxdrv is signed!"
      when:
        - vboxdrv_modinfo.rc == 0
        - vboxdrv_modinfo.stdout is search('^signature:', multiline=True)

    - name: sign the vboxdrv module
      ansible.builtin.command: dpkg-reconfigure virtualbox-dkms
      become: true
      when:
        - vboxdrv_modinfo.rc == 0
        - vboxdrv_modinfo.stdout is not search('^signature:', multiline=True)

    - name: Import MOK key if module is signed but not yet trusted by Secure Boot
      ansible.builtin.command: mokutil --import /var/lib/shim-signed/mok/MOK.der
      register: mokutil_import
      when:
        - vboxdrv_modinfo.stdout is search('^signature:', multiline=True)
        - vboxdrv_modinfo.stdout is search('Secure Boot Module Signature key')
        - "'vboxdrv' not in lookup('ansible.builtin.pipe', 'lsmod')"

    - name: Load vboxdrv kernel module
      become: true
      community.general.modprobe:
        name: vboxdrv
        state: present
      register: modprobe_result
      ignore_errors: true

    - name: Prompt user to reboot if modprobe failed
      debug:
        msg: >
          "vboxdrv module couldn't load, likely due to Secure Boot restrictions.
          Please reboot now, follow the MOK Manager prompts to enroll your key,
          then re-run this Ansible playbook."
      when: modprobe_result is failed

