- name: Setup Terraform Environment
  hosts: localhost
  become: true
  tasks:

    - name: Install dependencies (KVM, Libvirt, Terraform)
      ansible.builtin.package:
        name:
          - qemu-kvm
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - virt-manager
          - software-properties-common
          - gnupg
        state: present
        update_cache: true
      when: ansible_pkg_mgr is defined


    - name: Add HashiCorp GPG key for the detected package manager
      block:
        - name: Debian-based (APT)
          ansible.builtin.apt_key:
            url: https://apt.releases.hashicorp.com/gpg
            keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg
            state: present
          when: ansible_pkg_mgr == "apt"

        - name: RedHat-based (YUM/DNF)
          ansible.builtin.rpm_key:
            key: https://rpm.releases.hashicorp.com/gpg
            state: present
          when: ansible_pkg_mgr in ["dnf", "yum"]

        - name: SUSE-based (Zypper)
          ansible.builtin.rpm_key:
            key: https://rpm.releases.hashicorp.com/gpg
            state: present
          when: ansible_pkg_mgr == "zypper"

    - name: Install Homebrew (if not installed)
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
        method: GET
        return_content: true
      register: homebrew_install_script

    - name: Run Homebrew install script
      ansible.builtin.command: "/bin/bash -c '{{ homebrew_install_script.content | quote }}'"
      args:
        creates: /home/linuxbrew/.linuxbrew/bin/brew

    - name: Install Terraform via Homebrew community.general.homebrew
      community.general.homebrew:
        name: terraform
        state: present

    - name: Add user to libvirt and KVM groups
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: libvirt,kvm
        append: true

    - name: Start and enable Libvirt
      ansible.builtin.systemd:
        name: libvirtd
        state: started
        enabled: true

    - name: Download AlmaLinux cloud image
      ansible.builtin.get_url:
        url: https://repo.almalinux.org/almalinux/9/cloud/x86_64/images/AlmaLinux-9-GenericCloud-latest.x86_64.qcow2
        dest: /var/lib/libvirt/images/almalinux.qcow2
        mode: '0644'

    - name: Ensure Terraform directory exists
      ansible.builtin.file:
        path: /home/{{ ansible_user_id }}/terraform-vm
        state: directory
        mode: '0755'

    # ✅ STEP 1: Define the storage pool only if it does not exist
    - name: Check if default Libvirt storage pool exists
      ansible.builtin.command: virsh pool-info default
      register: pool_info
      changed_when: false
      ignore_errors: true

    - name: Define default Libvirt storage pool if it does not exist
      community.libvirt.virt_pool:
        name: default
        state: present
        xml: |
          <pool type='dir'>
            <name>default</name>
            <target>
              <path>/var/lib/libvirt/images</path>
            </target>
          </pool>
      when: pool_info.rc != 0  # Run only if the pool is missing

    # ✅ STEP 2: Start the pool only if it's not already active
    - name: Check if default Libvirt storage pool is active
      ansible.builtin.command: virsh pool-list --state active
      register: active_pools
      changed_when: false

    - name: Start default Libvirt storage pool if not already running
      community.libvirt.virt_pool:
        name: default
        state: active
      when: "'default' not in active_pools.stdout"

    # ✅ STEP 3: Enable autostart only if it's not already enabled
    - name: Check if default Libvirt storage pool is set to autostart
      ansible.builtin.command: virsh pool-list --autostart
      register: autostart_pools
      changed_when: false

    - name: Enable autostart for default Libvirt storage pool if not already enabled
      community.libvirt.virt_pool:
        name: default
        autostart: true
      when: "'default' not in autostart_pools.stdout"
