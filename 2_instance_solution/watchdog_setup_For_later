/* monitor_service.go */

package main

func main() {
    // Monitoring logic will go here
}

/* test_environment.go */

package main

func main() {
    // Test environment logic will go here
}

/* watchdog.sh */

#!/bin/bash

WATCH_FILE="$(dirname "$0")/halt_testenv"

while true; do
  if [[ -f "$WATCH_FILE" ]]; then
    echo "[watchdog] halt_testenv signal detected. Halting testenv..."
    vagrant halt testenv
    rm -f "$WATCH_FILE"
  fi
  sleep 5
done

/* reset_testenv.sh */

#!/bin/bash

echo "[reset] Rebuilding testenv VM..."
vagrant destroy -f testenv
vagrant up testenv

/* Vagrantfile */

Vagrant.configure("2") do |config|
  config.vm.define "monitor" do |monitor|
    monitor.vm.box = "almalinux/9"
    monitor.vm.hostname = "monitor"
    monitor.vm.network "private_network", ip: "192.168.56.10"
    monitor.vm.provision "file", source: "monitor_service.go", destination: "/home/vagrant/monitor_service.go"
  end

  config.vm.define "testenv" do |testenv|
    testenv.vm.box = "almalinux/9"
    testenv.vm.hostname = "testenv"
    testenv.vm.network "private_network", ip: "192.168.56.11"
    testenv.vm.provision "file", source: "test_environment.go", destination: "/home/vagrant/test_environment.go"
  end

  # Start watchdog on host after Vagrant is up (requires vagrant-triggers plugin)
  if Vagrant.has_plugin?("vagrant-triggers")
    config.trigger.after :up do |trigger|
      trigger.name = "Start watchdog"
      trigger.run = {
        inline: "nohup ./watchdog.sh > watchdog.log 2>&1 &"
      }
    end
  else
    puts "[WARN] Install vagrant-triggers plugin to auto-run watchdog.sh: vagrant plugin install vagrant-triggers"
  end
end
